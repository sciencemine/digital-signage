{
  "_args": [
    [
      {
        "raw": "ember-cli-babel@^6.0.0",
        "scope": null,
        "escapedName": "ember-cli-babel",
        "name": "ember-cli-babel",
        "rawSpec": "^6.0.0",
        "spec": ">=6.0.0 <7.0.0",
        "type": "range"
      },
      "C:\\Users\\Gluef_000\\Desktop\\digital-signage\\node_modules\\ember-bootstrap"
    ]
  ],
  "_from": "ember-cli-babel@>=6.0.0 <7.0.0",
  "_id": "ember-cli-babel@6.1.0",
  "_inCache": true,
  "_location": "/ember-cli-babel",
  "_nodeVersion": "7.1.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/ember-cli-babel-6.1.0.tgz_1493387659635_0.9108268199488521"
  },
  "_npmUser": {
    "name": "rwjblue",
    "email": "me@rwjblue.com"
  },
  "_npmVersion": "3.10.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "ember-cli-babel@^6.0.0",
    "scope": null,
    "escapedName": "ember-cli-babel",
    "name": "ember-cli-babel",
    "rawSpec": "^6.0.0",
    "spec": ">=6.0.0 <7.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/ember-bootstrap"
  ],
  "_resolved": "https://registry.npmjs.org/ember-cli-babel/-/ember-cli-babel-6.1.0.tgz",
  "_shasum": "d9c83a7d0c67cc8a3ccb9bd082971c3593e54fad",
  "_shrinkwrap": null,
  "_spec": "ember-cli-babel@^6.0.0",
  "_where": "C:\\Users\\Gluef_000\\Desktop\\digital-signage\\node_modules\\ember-bootstrap",
  "author": {
    "name": "Gordon Kristan"
  },
  "bugs": {
    "url": "https://github.com/babel/ember-cli-babel/issues"
  },
  "dependencies": {
    "amd-name-resolver": "0.0.6",
    "babel-plugin-debug-macros": "^0.1.6",
    "babel-plugin-transform-es2015-modules-amd": "^6.24.0",
    "babel-polyfill": "^6.16.0",
    "babel-preset-env": "^1.2.0",
    "broccoli-babel-transpiler": "^6.0.0",
    "broccoli-funnel": "^1.0.0",
    "broccoli-source": "^1.1.0",
    "clone": "^2.0.0",
    "ember-cli-version-checker": "^1.2.0"
  },
  "description": "Ember CLI addon for Babel",
  "devDependencies": {
    "broccoli-test-helper": "^1.1.0",
    "chai": "^3.5.0",
    "co": "^4.6.0",
    "common-tags": "^1.4.0",
    "console-ui": "^1.0.2",
    "core-object": "^2.0.6",
    "ember-cli": "^2.6.2",
    "ember-cli-dependency-checker": "^1.2.0",
    "ember-cli-htmlbars": "^1.0.8",
    "ember-cli-htmlbars-inline-precompile": "^0.4.0-beta.1",
    "ember-cli-inject-live-reload": "^1.3.1",
    "ember-cli-qunit": "^3.0.2",
    "ember-export-application-global": "^1.0.3",
    "ember-load-initializers": "0.5.1",
    "ember-resolver": "^2.1.0",
    "loader.js": "4.0.11",
    "mocha": "^3.2.0",
    "resolve": "^1.3.2"
  },
  "directories": {
    "doc": "doc",
    "test": "tests"
  },
  "dist": {
    "shasum": "d9c83a7d0c67cc8a3ccb9bd082971c3593e54fad",
    "tarball": "https://registry.npmjs.org/ember-cli-babel/-/ember-cli-babel-6.1.0.tgz"
  },
  "ember-addon": {
    "configPath": "tests/dummy/config"
  },
  "engines": {
    "node": "^4.5 || 6.* || 7.*"
  },
  "files": [
    "index.js"
  ],
  "gitHead": "d9ae8df6d3726dbb3dfa9b93b5bfc42330bd5aff",
  "homepage": "https://github.com/babel/ember-cli-babel#readme",
  "keywords": [
    "ember-addon",
    "babel",
    "ember",
    "ember-cli",
    "transpile",
    "transpiler"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "gordonkristan",
      "email": "me@gordonkristan.com"
    },
    {
      "name": "rwjblue",
      "email": "me@rwjblue.com"
    },
    {
      "name": "sebmck",
      "email": "sebmck@gmail.com"
    },
    {
      "name": "stefanpenner",
      "email": "stefan.penner@gmail.com"
    },
    {
      "name": "turbo87",
      "email": "tobias.bieniek@gmx.de"
    }
  ],
  "name": "ember-cli-babel",
  "optionalDependencies": {},
  "readme": "# ember-cli-babel\n\n[![Build Status](https://travis-ci.org/babel/ember-cli-babel.svg?branch=master)](https://travis-ci.org/babel/ember-cli-babel)\n[![Build status](https://ci.appveyor.com/api/projects/status/2a6pspve1wrwwyj5/branch/master?svg=true)](https://ci.appveyor.com/project/embercli/ember-cli-babel/branch/master)\n\n\nThis Ember-CLI plugin uses [Babel](https://babeljs.io/) and [babel-preset-env](https://github.com/babel/babel-preset-env) to allow you to use ES6 syntax with your Ember CLI project.\n\n## Installation\n\n```\nember install ember-cli-babel\n```\n\n## Usage\n\nThis plugin should work without any configuration after installing. By default it will take every `.js` file\nin your project and run it through the Babel transpiler to convert your ES6 code to code supported by your\ntarget browsers (as specified in `config/targets.js` in ember-cli >= 2.13). Running non-ES6 code\nthrough the transpiler shouldn't change the code at all (likely just a format change if it does).\n\nIf you need to customize the way that `babel-preset-env` configures the plugins that transform your code,\nyou can do it by passing in any of the options found [here](https://github.com/babel/babel-preset-env#options).\n\nExample (configuring babel directly):\n\n```js\n// ember-cli-build.js\n\nvar app = new EmberApp({\n  babel: {\n    // enable \"loose\" mode\n    loose: true,\n    // don't transpile generator functions\n    exclude: [\n      'transform-regenerator',\n    ]\n  }\n});\n```\n\nExample (configuring ember-cli-babel itself):\n\n```js\n// ember-cli-build.js\n\nvar app = new EmberApp({\n  'ember-cli-babel': {\n    compileModules: false\n  }\n});\n```\n\n### Polyfill\n\nBabel comes with a polyfill that includes a custom [regenerator runtime](https://github.com/facebook/regenerator/blob/master/runtime.js)\nand [core.js](https://github.com/zloirock/core-js). Many transformations will work without it, but for full support you\nmust include the polyfill in your app. The [Babel feature tour](https://babeljs.io/docs/tour/) includes a note for\nfeatures that require the polyfill to work.\n\nTo include it in your app, pass `includePolyfill: true` in your `ember-cli-babel` options.\n\n```js\n// ember-cli-build.js\n\nvar app = new EmberApp(defaults, {\n  'ember-cli-babel': {\n    includePolyfill: true\n  }\n});\n```\n\n### Addon usage\n\nFor addons which want additional customizations, they are able to interact with\nthis addon directly.\n\n```js\ntreeForAddon(tree) {\n  let addon = this.addons.find(addon => addon.name === 'ember-cli-babel'); // find your babel addon\n\n  let options = addon.buildBabelOptions({\n    'ember-cli-babel'\n  })\n\n  return addon.transpileTree(tree, {\n    'babel': {\n      // any babel specific options\n     },\n\n    'ember-cli-babel': {\n      // any ember-cli-babel options\n    }\n  });\n}\n```\n\n### Debug Tooling\n\nIn order to allow apps and addons to easily provide good development mode ergonomics (assertions, deprecations, etc) but\nstill perform well in production mode ember-cli-babel automatically manages stripping / removing certain debug\nstatements. This concept was originally proposed in [ember-cli/rfcs#50](https://github.com/ember-cli/rfcs/pull/50), \nbut has been slightly modified during implementation (after researching what works well and what does not).\n\n#### Debug Macros\n\nTo add convienient deprecations and assertions, consumers (in either an app or an addon) can do the following:\n\n```js\nimport { deprecate, assert } from '@ember/debug';\n\nexport default Ember.Component.extend({\n  init() {\n    this._super(...arguments);\n    deprecate(\n      'Passing a string value or the `sauce` parameter is deprecated, please pass an instance of Sauce instead',\n      false,\n      { until: '1.0.0', id: 'some-addon-sauce' }\n    );\n    assert('You must provide sauce for x-awesome.', this.sauce);\n  }\n})\n```\n\nIn testing and development environments those statements will be executed (and assert or deprecate as appropriate), but\nin production builds they will be inert (and stripped during minification).\n\nThe following are named exports that are available from `@ember/debug`:\n\n* `function deprecate(message: string, predicate: boolean, options: any): void` - Results in calling `Ember.deprecate`.\n* `function assert(message: string, predicate: boolean): void` - Results in calling `Ember.assert`.\n* `function warn(message: string, predicate: boolean)` - Results in calling `Ember.warn`.\n\n#### General Purpose Env Flags\n\nIn some cases you may have the need to do things in debug builds that isn't related to asserts/deprecations/etc. For\nexample, you may expose certain API's for debugging only. You can do that via the `DEBUG` environment flag:\n\n```js\nimport { DEBUG } from '@glimmer/env';\n\nconst Component = Ember.Component.extend();\n\nif (DEBUG) {\n  Component.reopen({\n    specialMethodForDebugging() {\n      // do things ;)\n    }\n  });\n}\n```\n\nIn testing and development environments `DEBUG` will be replaced by the boolean literal `true`, and in production builds it will be\nreplaced by `false`. When ran through a minifier (with dead code elimination) the entire section will be stripped.\n\n#### Disabling Debug Tooling Support\n\nIf for some reason you need to disable this debug tooling, you can opt-out via configuration.\n\nIn an app that would look like:\n\n```js\n// ember-cli-build.js\nmodule.exports = function(defaults) {\n  let app = new EmberApp(defaults, {\n    'ember-cli-babel': {\n      disableDebugTooling: true\n    }\n  });\n\n  return app.toTree();\n}\n```\n\n### About Modules\n\nOlder versions of Ember CLI (`< 2.12`) use its own ES6 module transpiler. Because of that, this plugin disables Babel\nmodule compilation by blacklisting that transform when running under affected ember-cli versions. If you find that you\nwant to use the Babel module transform instead of the Ember CLI one, you'll have to explicitly set `compileModules` to `true`\nin your configuration. If `compileModules` is anything other than `true`, this plugin will leave the module\nsyntax compilation up to Ember CLI.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/babel/ember-cli-babel.git"
  },
  "scripts": {
    "build": "ember build",
    "jshint": "jshint",
    "start": "ember server",
    "test": "mocha node-tests && ember test",
    "test:debug": "mocha debug node-tests",
    "test:node": "mocha node-tests"
  },
  "version": "6.1.0"
}
