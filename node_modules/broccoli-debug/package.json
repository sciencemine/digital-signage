{
  "_args": [
    [
      {
        "raw": "broccoli-debug@^0.6.1",
        "scope": null,
        "escapedName": "broccoli-debug",
        "name": "broccoli-debug",
        "rawSpec": "^0.6.1",
        "spec": ">=0.6.1 <0.7.0",
        "type": "range"
      },
      "C:\\Users\\Gluef_000\\Desktop\\digital-signage\\node_modules\\broccoli-stew"
    ]
  ],
  "_from": "broccoli-debug@>=0.6.1 <0.7.0",
  "_id": "broccoli-debug@0.6.1",
  "_inCache": true,
  "_location": "/broccoli-debug",
  "_nodeVersion": "7.1.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/broccoli-debug-0.6.1.tgz_1494175410722_0.2759642533492297"
  },
  "_npmUser": {
    "name": "rwjblue",
    "email": "me@rwjblue.com"
  },
  "_npmVersion": "3.10.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "broccoli-debug@^0.6.1",
    "scope": null,
    "escapedName": "broccoli-debug",
    "name": "broccoli-debug",
    "rawSpec": "^0.6.1",
    "spec": ">=0.6.1 <0.7.0",
    "type": "range"
  },
  "_requiredBy": [
    "/broccoli-stew"
  ],
  "_resolved": "https://registry.npmjs.org/broccoli-debug/-/broccoli-debug-0.6.1.tgz",
  "_shasum": "aec612ba8e5419952f44dc78be52bfabcbc087f6",
  "_shrinkwrap": null,
  "_spec": "broccoli-debug@^0.6.1",
  "_where": "C:\\Users\\Gluef_000\\Desktop\\digital-signage\\node_modules\\broccoli-stew",
  "author": {
    "name": "Robert Jackson",
    "email": "me@rwjblue.com"
  },
  "dependencies": {
    "broccoli-plugin": "^1.2.1",
    "fs-tree-diff": "^0.5.2",
    "heimdalljs": "^0.2.1",
    "heimdalljs-logger": "^0.1.7",
    "minimatch": "^3.0.3",
    "sanitize-filename": "^1.6.1",
    "tree-sync": "^1.2.2"
  },
  "description": "Enable easy debugging of broccoli pipelines with broccoli-debug!",
  "devDependencies": {
    "broccoli-test-helper": "^1.1.0",
    "co": "^4.6.0",
    "qunit-eslint": "^1.0.0",
    "qunitjs": "^2.3.2",
    "symlink-or-copy": "^1.1.8"
  },
  "directories": {},
  "dist": {
    "shasum": "aec612ba8e5419952f44dc78be52bfabcbc087f6",
    "tarball": "https://registry.npmjs.org/broccoli-debug/-/broccoli-debug-0.6.1.tgz"
  },
  "files": [
    "src/"
  ],
  "gitHead": "1b36ccb6b7972c84a97c110f8b5b8447a9384475",
  "homepage": "",
  "keywords": [
    "broccoli",
    "plugin"
  ],
  "license": "MIT",
  "main": "src/index.js",
  "maintainers": [
    {
      "name": "stefanpenner",
      "email": "stefan.penner@gmail.com"
    },
    {
      "name": "rwjblue",
      "email": "me@rwjblue.com"
    },
    {
      "name": "joliss",
      "email": "joliss42@gmail.com"
    }
  ],
  "name": "broccoli-debug",
  "optionalDependencies": {},
  "readme": "# broccoli-debug\n\nUtility for build pipeline authors to allow trivial debugging of the Broccoli\npipelines they author.\n\nHeavily inspired by [@stefanpenner](https://github.com/stefanpenner)'s\n[broccoli-stew's `debug`](https://github.com/stefanpenner/broccoli-stew/blob/v1.4.2/lib/debug.js)'s helper,\nbut improved in a few ways:\n\n* Supports leaving debug trees in the build with minimal cost when not being used.\n* Supports binary files (e.g. does not write `.png`'s as `utf8` text).\n* Adds [debug](https://github.com/visionmedia/debug) style debug matching.\n\n## Usage\n\n### Pipeline Authors\n\nTo allow consumers to debug the internals of various stages in your build pipeline,\nyou create a new instance of `BroccoliDebug` and return it instead.\n\nSomething like this:\n\n```js\nvar BroccoliDebug = require('broccoli-debug');\n\nlet tree = new BroccoliDebug(input, `ember-engines:${this.name}:addon-input`);\n```\n\nObviously, this would get quite verbose to do many times, so we have created a shortcut\nto easily create a number of debug trees with a shared prefix:\n\n```js\nlet debugTree = BroccoliDebug.buildDebugCallback(`ember-engines:${this.name}`);\n\nlet tree1 = debugTree(input1, 'addon-input');\n// tree1.debugLabel => 'ember-engines:<some-name>:addon-input'\n\nlet tree2 = debugTree(input2, 'addon-output');\n// tree2.debugLabel => 'ember-engines:<some-name>:addon-output\n```\n\n### Consumers\n\nFolks wanting to inspect the state of the build pipeline at that stage, would do the following:\n\n```js\nBROCCOLI_DEBUG=ember-engines:* ember b\n```\n\nNow you can take a look at the state of that input tree by:\n\n```js\nls DEBUG/ember-engines:*\n```\n\n### API\n\n```ts\ninterface BroccoliDebugOptions {\n  /**\n    The label to use for the debug folder. By default, will be placed in `DEBUG/*`.\n  */\n  label: string\n\n  /**\n    The base directory to place the input node contents when debugging is enabled.\n\n    Chooses the default in this order:\n\n    * `process.env.BROCCOLI_DEBUG_PATH`\n    * `path.join(process.cwd(), 'DEBUG')`\n  */\n  baseDir: string\n\n  /**\n    Should the tree be \"always on\" for debugging? This is akin to `debugger`, its very\n    useful while actively working on a build pipeline, but is likely something you would\n    remove before publishing.\n  */\n  force?: boolean\n}\n\nclass BroccoliDebug {\n  /**\n    Builds a callback function for easily generating `BroccoliDebug` instances\n    with a shared prefix.\n  */\n  static buildDebugCallback(prefix: string): (node: any, labelOrOptions: string | BroccoliDebugOptions) => BroccoliNode\n  constructor(node: BroccoliNode, labelOrOptions: string | BroccoliDebugOptions);\n  debugLabel: string;\n}\n```\n\n## Development\n\n### Installation\n\n* `git clone git@github.com:broccolijs/broccoli-debug.git`\n* `cd broccoli-debug`\n* `yarn`\n\n### Testing\n\n* `yarn test`\n",
  "readmeFilename": "README.md",
  "repository": {},
  "scripts": {
    "test": "qunit tests/**/*-test.js",
    "test:lint": "qunit tests/lint-test.js"
  },
  "version": "0.6.1"
}
