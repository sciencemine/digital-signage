{
  "_args": [
    [
      {
        "raw": "ember-wormhole@^0.4.1",
        "scope": null,
        "escapedName": "ember-wormhole",
        "name": "ember-wormhole",
        "rawSpec": "^0.4.1",
        "spec": ">=0.4.1 <0.5.0",
        "type": "range"
      },
      "C:\\Users\\Gluef_000\\Desktop\\digital-signage\\node_modules\\ember-bootstrap"
    ]
  ],
  "_from": "ember-wormhole@>=0.4.1 <0.5.0",
  "_id": "ember-wormhole@0.4.1",
  "_inCache": true,
  "_location": "/ember-wormhole",
  "_nodeVersion": "4.4.7",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/ember-wormhole-0.4.1.tgz_1473691701007_0.048639757791534066"
  },
  "_npmUser": {
    "name": "lukemelia",
    "email": "luke@lukemelia.com"
  },
  "_npmVersion": "2.15.8",
  "_phantomChildren": {
    "amdefine": "1.0.1",
    "babel-plugin-constant-folding": "1.0.1",
    "babel-plugin-dead-code-elimination": "1.0.2",
    "babel-plugin-eval": "1.0.1",
    "babel-plugin-inline-environment-variables": "1.0.1",
    "babel-plugin-jscript": "1.0.4",
    "babel-plugin-member-expression-literals": "1.0.1",
    "babel-plugin-property-literals": "1.0.1",
    "babel-plugin-proto-to-assign": "1.0.4",
    "babel-plugin-react-constant-elements": "1.0.3",
    "babel-plugin-react-display-name": "1.0.3",
    "babel-plugin-remove-console": "1.0.1",
    "babel-plugin-remove-debugger": "1.0.1",
    "babel-plugin-runtime": "1.0.7",
    "babel-plugin-undeclared-variables-check": "1.0.2",
    "babel-plugin-undefined-to-void": "1.1.6",
    "bluebird": "2.11.0",
    "brace-expansion": "1.1.7",
    "broccoli-funnel": "1.2.0",
    "broccoli-merge-trees": "1.2.4",
    "broccoli-persistent-filter": "1.3.1",
    "chalk": "1.1.3",
    "clone": "2.1.1",
    "convert-source-map": "1.5.0",
    "debug": "2.6.8",
    "ember-cli-version-checker": "1.3.1",
    "esutils": "2.0.2",
    "fs-readdir-recursive": "0.1.2",
    "get-stdin": "4.0.1",
    "hash-for-dep": "1.1.2",
    "is-finite": "1.0.2",
    "is-integer": "1.0.7",
    "json-stable-stringify": "1.0.1",
    "os-tmpdir": "1.0.2",
    "output-file-sync": "1.1.2",
    "path-exists": "1.0.0",
    "path-is-absolute": "1.0.1",
    "private": "0.1.7",
    "regenerator": "0.8.40",
    "regexpu": "1.3.0",
    "resolve": "1.3.3",
    "shebang-regex": "1.0.0",
    "slash": "1.0.0",
    "source-map": "0.5.6",
    "to-fast-properties": "1.0.3",
    "trim-right": "1.0.1",
    "try-resolve": "1.0.1",
    "user-home": "1.1.1"
  },
  "_requested": {
    "raw": "ember-wormhole@^0.4.1",
    "scope": null,
    "escapedName": "ember-wormhole",
    "name": "ember-wormhole",
    "rawSpec": "^0.4.1",
    "spec": ">=0.4.1 <0.5.0",
    "type": "range"
  },
  "_requiredBy": [
    "/ember-bootstrap"
  ],
  "_resolved": "https://registry.npmjs.org/ember-wormhole/-/ember-wormhole-0.4.1.tgz",
  "_shasum": "55fafaad20a650d21f6583a0e59c060a65338111",
  "_shrinkwrap": null,
  "_spec": "ember-wormhole@^0.4.1",
  "_where": "C:\\Users\\Gluef_000\\Desktop\\digital-signage\\node_modules\\ember-bootstrap",
  "author": {
    "name": "Yapp Labs"
  },
  "bugs": {
    "url": "https://github.com/yapplabs/ember-wormhole/issues"
  },
  "dependencies": {
    "ember-cli-babel": "^5.1.6",
    "ember-cli-htmlbars": "^1.0.3"
  },
  "description": "Render a child view somewhere else in the DOM.",
  "devDependencies": {
    "broccoli-asset-rev": "^2.4.2",
    "ember-ajax": "0.7.1",
    "ember-cli": "2.5.1",
    "ember-cli-app-version": "^1.0.0",
    "ember-cli-dependency-checker": "^1.2.0",
    "ember-cli-github-pages": "0.0.6",
    "ember-cli-htmlbars-inline-precompile": "^0.3.1",
    "ember-cli-inject-live-reload": "^1.4.0",
    "ember-cli-jshint": "^1.0.0",
    "ember-cli-qunit": "^1.4.0",
    "ember-cli-release": "0.2.8",
    "ember-cli-sri": "^2.1.0",
    "ember-cli-uglify": "^1.2.0",
    "ember-code-snippet": "^1.3.0",
    "ember-disable-prototype-extensions": "^1.1.0",
    "ember-export-application-global": "^1.0.5",
    "ember-load-initializers": "^0.5.1",
    "ember-resolver": "^2.0.3",
    "ember-try": "^0.2.2",
    "loader.js": "^4.0.1"
  },
  "directories": {
    "doc": "doc",
    "test": "tests"
  },
  "dist": {
    "shasum": "55fafaad20a650d21f6583a0e59c060a65338111",
    "tarball": "https://registry.npmjs.org/ember-wormhole/-/ember-wormhole-0.4.1.tgz"
  },
  "ember-addon": {
    "configPath": "tests/dummy/config",
    "demoURL": "http://yapplabs.github.io/ember-wormhole/"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "gitHead": "5bd5c28bb04c3b3247fb6928f161645ba82b0465",
  "homepage": "https://github.com/yapplabs/ember-wormhole#readme",
  "keywords": [
    "ember-addon"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "lukemelia",
      "email": "luke@lukemelia.com"
    },
    {
      "name": "raycohen",
      "email": "raycohen@gmail.com"
    },
    {
      "name": "chrislopresto",
      "email": "chris@chrislopresto.com"
    },
    {
      "name": "krisselden",
      "email": "kris.selden@gmail.com"
    }
  ],
  "name": "ember-wormhole",
  "optionalDependencies": {},
  "readme": "# Ember Wormhole [![Build Status](https://travis-ci.org/yapplabs/ember-wormhole.svg?branch=master)](https://travis-ci.org/yapplabs/ember-wormhole) [![Ember Observer Score](http://emberobserver.com/badges/ember-wormhole.svg)](http://emberobserver.com/addons/ember-wormhole)\n\nThis addon provides a component that allows for rendering a block\nto a DOM element somewhere else on the page. The component retains typical Ember\ncontext in terms of bound data and action handling. Ember Wormhole is\ncompatible with [Ember FastBoot](http://www.ember-fastboot.com/) as of version\n0.4.0, so long as the destination element is part of Ember's own templates.\n\n## Live Demo\n\nView a live demo here: [http://yapplabs.github.io/ember-wormhole/](http://yapplabs.github.io/ember-wormhole/)\n\n## But Why?\n\nThis library is particularly useful for cases where you have UI that is the logical child of\na component but needs to render as a top-level DOM element, such as a confirmation dialog.\n\n## And How?\n\nThis component tracks its element's child nodes. When inserted into the DOM, it appends\nits child nodes to a destination element elsewhere. When removed from the DOM, it\nremoves its child nodes, so as not to orphan them on the other side of the wormhole.\n\nNothing else changes -- data binding  and action bubbling still flow according to\nthe Ember component hierarchy. That includes usages of `yield`, so blocks provided\nto `ember-wormhole` simply appear in another part of the DOM.\n\n## Show Me Some Code!\n\nWe thought you'd never ask...\n\nGiven the following DOM:\n\n```html\n<body class=\"ember-application\">\n  <!-- Destination must be in the same element as your ember app -->\n  <!-- otherwise events/bindings will not work -->\n  <div id=\"destination\">\n  </div>\n  <div class=\"ember-view\">\n    <!-- rest of your Ember app's DOM... -->\n  </div>\n</body>\n```\n\nand a template like this:\n\n```hbs\n{{#ember-wormhole to=\"destination\"}}\n  Hello world!\n{{/ember-wormhole}}\n```\n\nThen \"Hello world!\" would be rendered inside the `destination` div.\n\nIf the ember-wormhole is destroyed its far-off children are destroyed too.\nFor example, given:\n\n```hbs\n{{#if isWormholeEnabled}}\n  {{#ember-wormhole to=\"destination\"}}\n    Hello world!\n  {{/ember-wormhole}}\n{{/if}}\n```\n\nIf `isWormholeEnabled` starts off true and becomes false, then the \"Hello\nworld!\" text will be removed from the `destination` div.\n\nSimilarly, if you use `ember-wormhole` in a route's template, it will\nrender its children in the destination element when the route is entered\nand remove them when the route is exited.\n\n## Can I Render In Place (i.e. Unwormhole)?\n\nYes! Sometimes you feel like a wormhole. Sometimes you don't. Situations\nsometimes call for the same content to be rendered through the wormhole or in place.\n\nIn this example, `renderInPlace` will override `to` and cause the wormhole content to be rendered in place.\n\n```hbs\n{{#ember-wormhole to=\"destination\" renderInPlace=\"true\"}}\n  Hello world!\n{{/ember-wormhole}}\n```\n\nThis technique is useful for:\n\n- Presenting typically-wormholed content within a styleguide\n- Toggling content back and forth through the wormhole\n- Parlor tricks\n\n## What if if my element has no id?\n\nYou can provide an element directly to the wormhole. For example:\n\n```hbs\n{{#ember-wormhole destinationElement=someElement}}\n  Hello world!\n{{/ember-wormhole}}\n```\n\nThis usage may be appropriate when using wormhole with dynamic targets,\nsuch as rendering into all elements matching a selector.\n\n## What Version of Ember is This Compatible With?\n\nThis library is compatible with and tested against Ember 1.13 and higher.\n\n## Development Setup\n\n### Installation\n\n* `git clone` this repository\n* `npm install`\n* `bower install`\n\n### Running Tests\n\n* `ember try:testall`\n* `ember test`\n* `ember test --server`\n\n### Running the dummy app\n\n* `ember server`\n* Visit your app at http://localhost:4200.\n\nFor more information on using ember-cli, visit [http://www.ember-cli.com/](http://www.ember-cli.com/).\n\n## Credits\n\nThis addon was extracted from [ember-modal-dialog](http://github.com/yapplabs/ember-modal-dialog).\nContributions from @stefanpenner, @krisselden, @chrislopresto, @lukemelia, @raycohen and\nothers. [Yapp Labs](http://yapplabs.com) is an Ember.js consultancy based in NYC.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/yapplabs/ember-wormhole.git"
  },
  "scripts": {
    "build": "ember build",
    "start": "ember server",
    "test": "ember test"
  },
  "version": "0.4.1"
}
