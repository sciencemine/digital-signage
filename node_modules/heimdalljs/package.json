{
  "_args": [
    [
      {
        "raw": "heimdalljs@^0.2.0",
        "scope": null,
        "escapedName": "heimdalljs",
        "name": "heimdalljs",
        "rawSpec": "^0.2.0",
        "spec": ">=0.2.0 <0.3.0",
        "type": "range"
      },
      "C:\\Users\\Gluef_000\\Desktop\\digital-signage\\node_modules\\broccoli-funnel"
    ]
  ],
  "_from": "heimdalljs@>=0.2.0 <0.3.0",
  "_id": "heimdalljs@0.2.4",
  "_inCache": true,
  "_location": "/heimdalljs",
  "_nodeVersion": "7.4.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/heimdalljs-0.2.4.tgz_1490294227052_0.026810521259903908"
  },
  "_npmUser": {
    "name": "hjdivad",
    "email": "npm@hjdivad.com"
  },
  "_npmVersion": "4.0.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "heimdalljs@^0.2.0",
    "scope": null,
    "escapedName": "heimdalljs",
    "name": "heimdalljs",
    "rawSpec": "^0.2.0",
    "spec": ">=0.2.0 <0.3.0",
    "type": "range"
  },
  "_requiredBy": [
    "/async-disk-cache",
    "/broccoli-debug",
    "/broccoli-funnel",
    "/broccoli-merge-trees",
    "/broccoli-persistent-filter",
    "/hash-for-dep",
    "/heimdalljs-logger"
  ],
  "_resolved": "https://registry.npmjs.org/heimdalljs/-/heimdalljs-0.2.4.tgz",
  "_shasum": "34ead16eab422c94803065d33abeba1f7b24a910",
  "_shrinkwrap": null,
  "_spec": "heimdalljs@^0.2.0",
  "_where": "C:\\Users\\Gluef_000\\Desktop\\digital-signage\\node_modules\\broccoli-funnel",
  "author": "",
  "bugs": {
    "url": "https://github.com/hjdivad/heimdalljs-lib/issues"
  },
  "dependencies": {
    "rsvp": "~3.2.1"
  },
  "description": "Structured instrumentation library",
  "devDependencies": {
    "babel-plugin-external-helpers": "^6.18.0",
    "babel-plugin-transform-runtime": "^6.15.0",
    "babel-preset-es2015": "^6.18.0",
    "broccoli": "^0.16.9",
    "chai": "^3.2.0",
    "chai-as-promised": "^5.1.0",
    "chai-files": "^1.2.0",
    "mocha": "^2.2.5",
    "mocha-jshint": "~2.2.3",
    "rollup": "^0.37.0",
    "rollup-plugin-babel": "^2.7.0",
    "rollup-plugin-commonjs": "^5.0.5",
    "rollup-plugin-json": "^2.0.2",
    "rollup-plugin-node-resolve": "^2.0.0"
  },
  "directories": {},
  "dist": {
    "shasum": "34ead16eab422c94803065d33abeba1f7b24a910",
    "tarball": "https://registry.npmjs.org/heimdalljs/-/heimdalljs-0.2.4.tgz"
  },
  "files": [
    "dist/heimdalljs.cjs.js",
    "dist/heimdalljs.es.js",
    "dist/heimdalljs.iife.js",
    "dist/heimdalljs.umd.js",
    "heimdall.js"
  ],
  "gitHead": "9aa1a57d529f437e994f796ff87aa5668ab8e83d",
  "homepage": "https://github.com/hjdivad/heimdalljs-lib#readme",
  "jsnext:main": "dist/heimdalljs.es.js",
  "keywords": [
    "javascript"
  ],
  "license": "MIT",
  "main": "dist/heimdalljs.cjs.js",
  "maintainers": [
    {
      "name": "hjdivad",
      "email": "npm@hjdivad.com"
    },
    {
      "name": "runspired",
      "email": "runspired@gmail.com"
    },
    {
      "name": "stefanpenner",
      "email": "stefan.penner@gmail.com"
    }
  ],
  "name": "heimdalljs",
  "optionalDependencies": {},
  "readme": "![build status](https://travis-ci.org/heimdalljs/heimdalljs-lib.svg)\n\n## Global Session\n\nHeimdall tracks a graph of timing and domain-specific stats for performance.\nStat collection and monitoring is separated from graph construction to provide\ncontrol over context detail.  Users can create fewer nodes to have reduced\nperformance overhead, or create more nodes to provide more detail.\n\nThe graph obviously needs to be global.  This is not a problem in the browser,\nbut in node we may have multiple different versions of heimdalljs loaded at\nonce.  Each one will have its own `Heimdall` instance, but will use the same\nsession, saved on `process`.  This means that the session will have a\nheterogeneous graph of `HeimdallNode`s.  For this reason, versions of heimdalljs\nthat change `Session`, or the APIs of `HeimdallNode` or `Cookie` will use a\ndifferent property to store their session (`process._heimdall_session_<n>`).  It\nis quite easy for this to result in lost detail & lost stats, although it is\nalso easy to detect this situation and issue a warning.\n\n## API\n\n### Heimdall\n\n### Creating a Heimdall instance\n\n`require('heimdalljs')` to access an instance using the globally shared session.\n\nYou can create your own instance with its own session, but this is generally\nreommended only for testing.\n\n```js\nvar Heimdall = require('heimdalljs/heimdall');\n// this will create its own session and not use the global session\nvar myInstance = new Heimdall();\n```\n\n#### Properties\n\n- `heimdall.current` Return the leaf `HeimdallNode` of the currently active nodes.\n- `heimdall.root` Return the root `HeimdallNode`\n\n#### Functions\n\n- `heimdall.start(id, Schema)` Create a new node with id `id`.  This node becomes the\n  active node.  Its parent is the currently active node.  Return this node's\n  `Cookie`.\n- `heimdall.node(id, [Schema], callback, [context])` Create a new node, invoke\n  `callback` passing in the newly created node's `stats` object and then stop\n  the node.\n- `registerMonitor(name, Schema)` register a monitor under namespace `name`.  An\n  error will be thrown if the reserved names `own` or `time` are used, or if a\n  monitor with that name has already been registered for this session.\n- `statsFor(name)` return the stats object for the monitor under namespace\n  `name`.\n- `configFor(name)` return the config object under `name`.  Heimdall does not do\n  anything with these config objects: it is a place for downstream consumers to\n  share config across a heimdall session (see eg\n  [heimdalljs-logger](https://github.com/heimdalljs/heimdalljs-logger)).\n- `toJSON()` return the json for the entire graph.  This is intended to be\n  written via `JSON.stringify` and then consumed by downstream apps (see eg\n  [broccoli-viz](https://github.com/stefanpenner/broccoli-viz)).\n- `visitPreOrder(callback)` sugar for `root.visitPreOrder(callback)`\n- `visitPostOrder(callback)` sugar for `root.visitPostOrder(callback)`\n\n\n### HeimdallNode\n\n#### Identifiers\n\n#### Properties\n\n- `isRoot` returns true for the root node, and false for all other nodes.\n\n#### Functions\n\n- `visitPreOrder(callback)` visit the subtree rooted at this node with a\n  depth-first pre-order traversal.\n- `visitPostOrder(callback)` visit the subtree rooted at this node with a\n  depth-first post-order traversal.\n- `forEachChild(callback)` invoke `callback` for each child of this node (but\n  not other descendants).\n- `remove` remove this node from its parent.  May only be called on an inactive,\n  non-root node.  Intended for long-running applications to free up memory after\n  saving a subgraph via `toJSONSubgraph`.\n- `toJSON()` Return the serialized representation of this ndoe.\n- `toJSONSubgraph()` Return the serialized representation of the subtree rooted at\n  this node.\n\n### Cookie\n\n#### Functions\n\n- `stop()` stop the node associated with this cookie.  May only be called on the\n  current node.\n- `resume()` resume a stopped node.  This is useful for nodes that are restarted\n  asynchronously.\n\n## Example Usage\n\n### Simple\n\n```js\nvar heimdall = require('heimdall');\n\nfunction BroccoliNodeSchema() {\n  this.builds = 0;\n}\n\n\nheimdall.node('broccoli', function () {\n  heimdall.node('node:babel', BroccoliNodeSchema, function (h) {\n    h.builds++;\n\n    heimdall.node('node:persistent-filter', BroccoliNodeSchema, function (h) {\n      h.builds++;\n    });\n\n    heimdall.node('node:caching-writer', BroccoliNodeSchema, function (h) {\n      h.builds++;\n    });\n  });\n});\n\n```\n\n```json\n{\n  \"nodes\": [{\n    \"id\": 0,\n    \"name\": \"broccoli\",\n    \"stats\": {\n      \"cpu\": {\n        \"self\": 10,\n      },\n    },\n    \"children\": {\n      \"start\": [1],\n      \"end\": [1],\n    },\n  }, {\n    \"id\": 1,\n    \"name\": \"node:babel\",\n    \"stats\": {\n      \"builds\": 1,\n      \"cpu\": {\n        \"self\": 20,\n      },\n    },\n    \"children\": {\n      \"start\": [2, 3],\n      \"end\": [2, 3],\n    },\n  }, {\n    \"id\": 2,\n    \"name\": \"node:persistent-filter\",\n    \"stats\": {\n      \"builds\": 1,\n      \"cpu\": {\n        \"self\": 30,\n      },\n    },\n  }, {\n    \"id\": 3,\n    \"name\": \"node:caching-writer\",\n    \"stats\": {\n      \"builds\": 1,\n      \"cpu\": {\n        \"self\": 40,\n      },\n    },\n  }],\n}\n```\n\n### With Monitors\n\n```js\nvar heimdall = require('heimdall');\nvar fs = require('fs');\n\nvar origLstatSync = fs.lstatSync;\nvar origMkdirSync = fs.mkdirSync;\n\nheimdall.registerMonitor('fs', function FSSchema() {\n  this.lstatCount = 0;\n  this.mkdirCount = 0;\n});\n\nfs.lstatSync = function () {\n  heimdall.statsFor('fs').lstatCount++;\n  return origLstatSync.apply(fs, arguments);\n}\n\nfs.mkdirSync = function () {\n  heimdall.statsFor('fs').mkdirCount++;\n  return origMkdirSync.apply(fs, arguments);\n}\n\n\nfunction BroccoliNodeSchema() {\n  this.builds = 0;\n}\n\n\nheimdall.node('broccoli', function () {\n  heimdall.node('node:babel', BroccoliNodeSchema, function (h) {\n    h.builds++;\n\n    heimdall.node('node:persistent-filter', BroccoliNodeSchema, function (h) {\n      h.builds++;\n      fs.mkdirSync('./tmp');\n    });\n\n    heimdall.node('node:caching-writer', BroccoliNodeSchema, function (h) {\n      h.builds++;\n      fs.lstatSync('./tmp');\n    });\n  });\n});\n\n```\n\n```json\n{\n  \"nodes\": [{\n    \"id\": 0,\n    \"name\": \"broccoli\",\n    \"stats\": {\n      \"cpu\": {\n        \"self\": 10,\n      },\n      \"fs\": {\n        \"lstatCount\": 0,\n        \"mkdirCount\": 0,\n      },\n    },\n    \"children\": {\n      \"start\": [1],\n      \"end\": [1],\n    },\n  }, {\n    \"id\": 1,\n    \"name\": \"node:babel\",\n    \"stats\": {\n      \"builds\": 1,\n      \"cpu\": {\n        \"self\": 20,\n      },\n      \"fs\": {\n        \"lstatCount\": 0,\n        \"mkdirCount\": 0,\n      },\n    },\n    \"children\": {\n      \"start\": [2, 3],\n      \"end\": [2, 3],\n    },\n  }, {\n    \"id\": 2,\n    \"name\": \"node:persistent-filter\",\n    \"stats\": {\n      \"builds\": 1,\n      \"cpu\": {\n        \"self\": 30,\n      },\n      \"fs\": {\n        \"lstatCount\": 0,\n        \"mkdirCount\": 1,\n      },\n    },\n  }, {\n    \"id\": 3,\n    \"name\": \"node:caching-writer\",\n    \"stats\": {\n      \"builds\": 1,\n      \"cpu\": {\n        \"self\": 40,\n      },\n      \"fs\": {\n        \"lstatCount\": 1,\n        \"mkdirCount\": 0,\n      },\n    },\n  }],\n}\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/heimdalljs/heimdalljs-lib.git"
  },
  "scripts": {
    "build": "npm run build:node && npm run build:browser && npm run build:test",
    "build:browser": "rollup --no-strict -c browser.config.js",
    "build:node": "rollup --no-strict -c node.config.js",
    "build:test": "rollup --no-strict -c test.config.js",
    "prepublish": "npm run build",
    "test": "npm run build:node && npm run build:test && mocha dist/tests/bundle.cjs",
    "test:debug": "mocha --no-timeouts debug dist/tests/bundle.cjs"
  },
  "version": "0.2.4"
}
