{
  "_args": [
    [
      {
        "raw": "async-disk-cache@^1.2.1",
        "scope": null,
        "escapedName": "async-disk-cache",
        "name": "async-disk-cache",
        "rawSpec": "^1.2.1",
        "spec": ">=1.2.1 <2.0.0",
        "type": "range"
      },
      "C:\\Users\\Gluef_000\\Desktop\\digital-signage\\node_modules\\broccoli-persistent-filter"
    ]
  ],
  "_from": "async-disk-cache@>=1.2.1 <2.0.0",
  "_id": "async-disk-cache@1.3.2",
  "_inCache": true,
  "_location": "/async-disk-cache",
  "_nodeVersion": "7.4.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/async-disk-cache-1.3.2.tgz_1494870178580_0.42904871702194214"
  },
  "_npmUser": {
    "name": "stefanpenner",
    "email": "stefan.penner@gmail.com"
  },
  "_npmVersion": "4.0.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "async-disk-cache@^1.2.1",
    "scope": null,
    "escapedName": "async-disk-cache",
    "name": "async-disk-cache",
    "rawSpec": "^1.2.1",
    "spec": ">=1.2.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/broccoli-persistent-filter"
  ],
  "_resolved": "https://registry.npmjs.org/async-disk-cache/-/async-disk-cache-1.3.2.tgz",
  "_shasum": "ac53d6152843df202c9406e28d774362608d74dd",
  "_shrinkwrap": null,
  "_spec": "async-disk-cache@^1.2.1",
  "_where": "C:\\Users\\Gluef_000\\Desktop\\digital-signage\\node_modules\\broccoli-persistent-filter",
  "author": {
    "name": "Stefan Penner",
    "email": "stefan.penner@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/stefanpenner/async-disk-cache/issues"
  },
  "dependencies": {
    "debug": "^2.1.3",
    "heimdalljs": "^0.2.3",
    "istextorbinary": "2.1.0",
    "mkdirp": "^0.5.0",
    "rimraf": "^2.5.3",
    "rsvp": "^3.0.18",
    "username-sync": "1.0.1"
  },
  "description": "Async disk cache",
  "devDependencies": {
    "chai": "^3.2.0",
    "istanbul": "^0.4.4",
    "mocha": "^3.0.1",
    "stat-mode": "^0.2.1"
  },
  "directories": {},
  "dist": {
    "shasum": "ac53d6152843df202c9406e28d774362608d74dd",
    "tarball": "https://registry.npmjs.org/async-disk-cache/-/async-disk-cache-1.3.2.tgz"
  },
  "files": [
    "index.js",
    "lib/"
  ],
  "gitHead": "eb9e9edd1665d1a74781eda934217038971dbeb3",
  "homepage": "https://github.com/stefanpenner/async-disk-cache#readme",
  "jscsConfig": {
    "preset": "google",
    "disallowMultipleVarDecl": true,
    "maximumLineLength": 80,
    "requireBlocksOnNewline": true,
    "validateLineBreaks": "LF"
  },
  "keywords": [
    "cache",
    "temp",
    "file"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "rwjblue",
      "email": "me@rwjblue.com"
    },
    {
      "name": "stefanpenner",
      "email": "stefan.penner@gmail.com"
    },
    {
      "name": "trentmwillis",
      "email": "trentmwillis@gmail.com"
    }
  ],
  "name": "async-disk-cache",
  "optionalDependencies": {},
  "readme": "# async-disk-cache [![Build status](https://ci.appveyor.com/api/projects/status/lfliompah66m611x?svg=true)](https://ci.appveyor.com/project/embercli/async-disk-cache) [![Build Status](https://travis-ci.org/stefanpenner/async-disk-cache.svg)](https://travis-ci.org/stefanpenner/async-disk-cache) \n\nAn aync disk cache. inspired by [jgable/cache-swap](https://github.com/jgable/cache-swap)\n\nA sync sibling version is also available: [stefanpenner/sync-disk-cache](https://github.com/stefanpenner/sync-disk-cache/)\n\n## Example\n\n```js\nvar Cache = require('async-disk-cache');\nvar cache = new Cache('my-cache');\n// 'my-cache' also serves as the global key for the cache.\n// if you have multiple programs with this same `cache-key` they will share the\n// same backing store. This by design.\n\n// checking\ncache.has('foo').then(function(wasFooFound) {\n\n});\n\n// retrieving (cache hit)\ncache.get('foo').then(function(cacheEntry) {\n  cacheEntry === {\n    isCached: true,\n    path: 'foo',\n    value: 'content of foo'\n  }\n});\n\n// retrieving (cache miss)\ncache.get('foo').then(function(cacheEntry) {\n  cacheEntry === {\n    isCached: false,\n    path: 'foo',\n    value: undefined\n  }\n});\n\n// retrieving (cache miss)\ncache.set('foo', 'content of foo').then(function() {\n  // was set\n});\n\n// clearing the cache\n\ncache.clear().then(function() {\n  // cache was cleared\n})\n```\n\n\nEnable compression:\n\n```js\nvar Cache = require('async-disk-cache');\nvar cache = new Cache('my-cache', {\n  compression: 'gzip' | 'deflate' | 'deflateRaw', // basically just what nodes zlib's ships with\n  supportBuffer: 'true' | 'false' // add support for file caching (default `false`)\n})\n```\n\n## License\n\nLicensed under the MIT License, Copyright 2015 Stefan Penner\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/stefanpenner/async-disk-cache.git"
  },
  "scripts": {
    "coverage": "istanbul cover _mocha",
    "test": "mocha test.js",
    "test:debug": "mocha debug test.js",
    "test:dot": "mocha test.js --reporter dot"
  },
  "version": "1.3.2"
}
